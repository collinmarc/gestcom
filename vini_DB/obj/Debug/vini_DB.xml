<?xml version="1.0"?>
<doc>
<assembly>
<name>
vini_DB
</name>
</assembly>
<members>
<member name="P:vini_DB.Client.Origine">
 <summary>
 Si le client est de type 'Intermédiaire' , indique l'origine des commande pour lequel il est un intermédiaire
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Client.createandload(System.String)">
 <summary>
 Constructeur pour Chargement par la clé
 </summary>
 <param name="pCode"> Code Fournisseur</param>
 <returns>Objet Fournisseur ou null</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Client.createandloadPrestashop(System.String)">
 <summary>
 Constructeur pour Chargement par la clé
 </summary>
 <param name="pCode"> Code Fournisseur</param>
 <returns>Objet Fournisseur ou null</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Client.setTypeIntermediaire(System.String)">
 <summary>
 Fixe le type de client à "intermédaire" et l'origine des commandes concernées
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Client.getIntermediairesPourUneOrigine(System.String)">
 <summary>
 Renvoie la liste des clients qui ont été identifiés comme intermédiaires pour une origine
 </summary>
 <param name="pOrigine"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.clsFTPVinicom.IsLockTo">
 <summary>
 Rend vrai sur le dichier lockTo existe sur le connecteur FTP
 </summary>
 <returns>Vrai/Faux</returns>
 <remarks>le Connecteur doit être connnecté</remarks>
</member>
<member name="M:vini_DB.clsFTPVinicom.IsLockFrom">
 <summary>
 Rend vrai sur le dichier lockFrom existe sur le connecteur FTP
 </summary>
 <returns>Vrai/Faux</returns>
 <remarks>le Connecteur doit être connnecté</remarks>
</member>
<member name="M:vini_DB.clsFTPVinicom.isLock(System.String)">
 <summary>
 Rend varai si le fichier existe sur le répertoire distant
 </summary>
 <param name="strFileName">nom du fichier</param>
 <returns>Vrai/Faux</returns>
 <remarks>Le Connecteur doit être connecté</remarks>
</member>
<member name="P:vini_DB.Commande.TiersRS">
 <summary>
 Rend la Raison sociale du Tiers 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.Commande.TiersCode">
 <summary>
 Rend le code du tiers
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.Commande.montantCommission">
 <summary>
 Rend le montant total de la Commssion sur la commande 
 </summary>
 <value></value>
 <returns></returns>
 <remarks>valeur calculée = Somme des Commssions dur les lignes</remarks>
</member>
<member name="M:vini_DB.Commande.calculPrixTotal">
 <summary>
 Calcul du prix total de la Commande + Commssion 
 </summary>
 <returns></returns>
 <remarks>le calcul de la commssion n'est effectuté que pour les commande</remarks>
</member>
<member name="M:vini_DB.Commande.toCSVQuadraFact(System.String)">
 <summary>
 Export d'une Sous commande au format CSV pour être importée Par le Logiciel QuadraFact
 </summary>
 <returns>Nom du fichier généré ou ""</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Commande.ValiderExportQuadra">
 <summary>
 Valider l'export quadra : Changement d'état de la sousCommande
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Commande.getCodeCommande">
 <summary>
 Rend le code de la commande (Par defaut le code)
 Surchargé dans Sous commande pour renvoyer codecommande
 Surcharge utilisé dans l'exportQuadra
 </summary>
 <returns></returns>
</member>
<member name="P:vini_DB.CommandeClient.RaisonSocialeLivraison">
 <summary>
 Raison Sociale de Livraison (#702)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.CommandeClient.NomLivraison">
 <summary>
 Nom de la personne pour la livraison (#702)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.CommandeClient.annulationSousCommande">
 <summary>
 Annulation des sousCommandes 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.CommandeClient.controleStockDispo">
 <summary>
 Controle du stock disponible pour chaque ligne de commande
 met à jour l'indicateur bStockDispo sur la ligne de commande
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.CommandeClient.ValiderExportQuadra">
 <summary>
 Valider l'export quadra : Changement d'état de la sousCommande
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:vini_DB.NETFTPclient">
 <summary>
 A wrapper class for .NET 2.0 FTP
 </summary>
 <remarks>
 This class does not hold open an FTP connection but
 instead is stateless: for each FTP request it
 connects, performs the request and disconnects.
 </remarks>
</member>
<member name="M:vini_DB.NETFTPclient.#ctor">
 <summary>
 Blank constructor
 </summary>
 <remarks>Hostname, username and password must be set manually</remarks>
</member>
<member name="M:vini_DB.NETFTPclient.#ctor(System.String)">
 <summary>
 Constructor just taking the hostname
 </summary>
 <param name="Hostname">in either ftp://ftp.host.com or ftp.host.com form</param>
 <remarks></remarks>
</member>
<member name="M:vini_DB.NETFTPclient.#ctor(System.String,System.String,System.String)">
 <summary>
 Constructor taking hostname, username and password
 </summary>
 <param name="Hostname">in either ftp://ftp.host.com or ftp.host.com form</param>
 <param name="Username">Leave blank to use 'anonymous' but set password to your email</param>
 <param name="Password"></param>
 <remarks></remarks>
</member>
<member name="M:vini_DB.NETFTPclient.ListDirectory(System.String)">
 <summary>
 Return a simple directory listing
 </summary>
 <param name="directory">Directory to list, e.g. /pub</param>
 <returns>A list of filenames and directories as a List(of String)</returns>
 <remarks>For a detailed directory listing, use ListDirectoryDetail</remarks>
</member>
<member name="M:vini_DB.NETFTPclient.ListDirectoryDetail(System.String)">
 <summary>
 Return a detailed directory listing
 </summary>
 <param name="directory">Directory to list, e.g. /pub/etc</param>
 <returns>An FTPDirectory object</returns>
</member>
<member name="M:vini_DB.NETFTPclient.Upload(System.String,System.String)">
 <summary>
 Copy a local file to the FTP server
 </summary>
 <param name="localFilename">Full path of the local file</param>
 <param name="targetFilename">Target filename, if required</param>
 <returns></returns>
 <remarks>If the target filename is blank, the source filename is used
 (assumes current directory). Otherwise use a filename to specify a name
 or a full path and filename if required.</remarks>
</member>
<member name="M:vini_DB.NETFTPclient.Upload(System.IO.FileInfo,System.String)">
 <summary>
 Upload a local file to the FTP server
 </summary>
 <param name="fi">Source file</param>
 <param name="targetFilename">Target filename (optional)</param>
 <returns></returns>
</member>
<member name="M:vini_DB.NETFTPclient.Download(System.String,System.String,System.Boolean)">
 <summary>
 Copy a file from FTP server to local
 </summary>
 <param name="sourceFilename">Target filename, if required</param>
 <param name="localFilename">Full path of the local file</param>
 <returns></returns>
 <remarks>Target can be blank (use same filename), or just a filename
 (assumes current directory) or a full path and filename</remarks>
</member>
<member name="M:vini_DB.NETFTPclient.FtpDelete(System.String)">
 <summary>
 Delete remote file
 </summary>
 <param name="filename">filename or full path</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.NETFTPclient.FtpFileExists(System.String)">
 <summary>
 Determine if file exists on remote FTP site
 </summary>
 <param name="filename">Filename (for current dir) or full path</param>
 <returns></returns>
 <remarks>Note this only works for files</remarks>
</member>
<member name="M:vini_DB.NETFTPclient.GetFileSize(System.String)">
 <summary>
 Determine size of remote file
 </summary>
 <param name="filename"></param>
 <returns></returns>
 <remarks>Throws an exception if file does not exist</remarks>
</member>
<member name="M:vini_DB.NETFTPclient.GetCredentials">
 <summary>
 Get the credentials from username/password
 </summary>
</member>
<member name="M:vini_DB.NETFTPclient.GetFullPath(System.String)">
 <summary>
 returns a full path using CurrentDirectory for a relative file reference
 </summary>
</member>
<member name="M:vini_DB.NETFTPclient.AdjustDir(System.String)">
 <summary>
 Amend an FTP path so that it always starts with /
 </summary>
 <param name="path">Path to adjust</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.NETFTPclient.GetStringResponse(System.Net.FtpWebRequest)">
 <summary>
 Obtains a response stream as a string
 </summary>
 <param name="ftp">current FTP request</param>
 <returns>String containing response</returns>
 <remarks>FTP servers typically return strings with CR and
 not CRLF. Use respons.Replace(vbCR, vbCRLF) to convert
 to an MSDOS string</remarks>
</member>
<member name="M:vini_DB.NETFTPclient.GetSize(System.Net.FtpWebRequest)">
 <summary>
 Gets the size of an FTP request
 </summary>
 <param name="ftp"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.NETFTPclient.Hostname">
 <summary>
 Hostname
 </summary>
 <value></value>
 <remarks>Hostname can be in either the full URL format
 ftp://ftp.myhost.com or just ftp.myhost.com
 </remarks>
</member>
<member name="P:vini_DB.NETFTPclient.Username">
 <summary>
 Username property
 </summary>
 <value></value>
 <remarks>Can be left blank, in which case 'anonymous' is returned</remarks>
</member>
<member name="F:vini_DB.NETFTPclient._currentDirectory">
 <summary>
 The CurrentDirectory value
 </summary>
 <remarks>Defaults to the root '/'</remarks>
</member>
<member name="T:vini_DB.FTPfileInfo">
 <summary>
 Represents a file or directory entry from an FTP listing
 </summary>
 <remarks>
 This class is used to parse the results from a detailed
 directory list from FTP. It supports most formats of
 </remarks>
</member>
<member name="T:vini_DB.FTPfileInfo.DirectoryEntryTypes">
 <summary>
 Identifies entry as either File or Directory
 </summary>
</member>
<member name="M:vini_DB.FTPfileInfo.#ctor(System.String,System.String)">
 <summary>
 Constructor taking a directory listing line and path
 </summary>
 <param name="line">The line returned from the detailed directory list</param>
 <param name="path">Path of the directory</param>
 <remarks></remarks>
</member>
<member name="F:vini_DB.FTPfileInfo._ParseFormats">
 <summary>
 List of REGEX formats for different FTP server listing formats
 </summary>
 <remarks>
 The first three are various UNIX/LINUX formats, fourth is for MS FTP
 in detailed mode and the last for MS FTP in 'DOS' mode.
 I wish VB.NET had support for Const arrays like C# but there you go
 </remarks>
</member>
<member name="T:vini_DB.FTPdirectory">
 <summary>
 Stores a list of files and directories from an FTP result
 </summary>
 <remarks></remarks>
</member>
<member name="M:vini_DB.FTPdirectory.#ctor(System.String,System.String)">
 <summary>
 Constructor: create list from a (detailed) directory string
 </summary>
 <param name="dir">directory listing string</param>
 <param name="path"></param>
 <remarks></remarks>
</member>
<member name="M:vini_DB.FTPdirectory.GetFiles(System.String)">
 <summary>
 Filter out only files from directory listing
 </summary>
 <param name="ext">optional file extension filter</param>
 <returns>FTPdirectory listing</returns>
</member>
<member name="M:vini_DB.FTPdirectory.GetDirectories">
 <summary>
 Returns a list of only subdirectories
 </summary>
 <returns>FTPDirectory list</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.ExportQuadra.ExportBaf">
 <summary>
 Export des Commandes dans un fichier CSV pour Quadra
 </summary>
</member>
<member name="M:vini_DB.ExportQuadra.ValiderExportBaf">
 <summary>
 Valider l'export 
 </summary>
 <returns></returns>
</member>
<member name="M:vini_DB.ExportQuadra.loadListCmd">
 <summary>
 Rend la liste des commandes à exporter
 </summary>
 <returns></returns>
</member>
<member name="M:vini_DB.FactHBV.createandloadFromCmd(System.Int64)">
 <summary>
 Creation et chargement d'une factute HBV à partir d'un id de commande
 </summary>
 <param name="pIdCmd"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.FactHBV.insert">
 <summary>
 insertion d'une facture dans la base de données
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.cmdprestashop.readXML(System.String)">
 <summary>
 Lecture d'une chaine XML et retour d'une Commande
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.cmdprestashop.check">
 <summary>
 Vérification de la Commande importée
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.cmdprestashop.createCommandeClient">
 <summary>
 Création d'une commande Client à partir d'une commande prestaShop
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:vini_DB.ImapVB.Imap">
 <summary>
 Imap class implementes IMAP client API
 </summary>
</member>
<member name="F:vini_DB.ImapVB.Imap.m_bIsLoggedIn">
 <summary>
 If user has logged in to his mailbox.
 </summary>
</member>
<member name="F:vini_DB.ImapVB.Imap.m_sMailboxName">
 <summary>
 Mailbox (Folder) name. Default INBOX.
 </summary>
</member>
<member name="F:vini_DB.ImapVB.Imap.m_bIsFolderSelected">
 <summary>
 If folder is selected.
 </summary>
</member>
<member name="F:vini_DB.ImapVB.Imap.m_bIsFolderExamined">
 <summary>
 if folder is examined.
 </summary>
</member>
<member name="F:vini_DB.ImapVB.Imap.m_nTotalMessages">
 <summary>
 Total number of messages in mailbox.
 </summary>
</member>
<member name="F:vini_DB.ImapVB.Imap.m_nRecentMessages">
 <summary>
 Number of recent messages in mailbox.
 </summary>
</member>
<member name="F:vini_DB.ImapVB.Imap.m_nFirstUnSeenMsgUID">
 <summary>
 First unseen message UID
 </summary>
</member>
<member name="M:vini_DB.ImapVB.Imap.Login(System.String,System.String,System.String)">
 <summary>
  Login to specified Imap host and default port (143)
 </summary>
 <param name="sHost">Imap Server name</param>
 <param name="sUserId">User's login id</param>
 <param name="sPassword">User's password</param>
</member>
<member name="M:vini_DB.ImapVB.Imap.LogOut">
 <summary>
 Logout the user: It logout the user and disconnect the connetion from IMAP server.
 </summary>
</member>
<member name="M:vini_DB.ImapVB.Imap.ExamineFolder(System.String)">
 <summary>
 Examine the sFolder/mailbox after login
 </summary>
 <param name="sFolder">Mailbox folder</param>
</member>
<member name="M:vini_DB.ImapVB.Imap.Restore(System.Boolean)">
 <summary>
 Restore the connection using available old data
 Select the sFolder if previously selected
 </summary>
 <param name="bSelectFolder">If true then it selects the folder</param>
</member>
<member name="M:vini_DB.ImapVB.Imap.HasEnoughQuota(System.String)">
 <summary>
 Check if enough quota is available
 </summary>
 <param name="sFolderName">Mailbox folder</param>
 <returns>true if enough mail quota</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.GetQuota(System.String,System.Boolean@,System.Int32@,System.Int32@)">
 <summary>
 Get the quota for specific folder
 </summary>
 <param name="sFolderName">Mailbox folder</param>
 <param name="bUnlimitedQuota">Is unlimited quota</param>
 <param name="nUsedKBytes">Used quota in Kbytes</param>
 <param name="nTotalKBytes">Total quota in KBytes</param>
</member>
<member name="M:vini_DB.ImapVB.Imap.SetFlag(System.String,System.String,System.Boolean)">
 <summary>
 Store flag
 </summary>
 <param name="sUid"></param>
 <param name="flag"> E.g \Deleted </param>
 <param name="removeFlag">Remove the flaf </param>
</member>
<member name="M:vini_DB.ImapVB.Imap.Expunge">
 <summary>
 Expunge
 </summary>
</member>
<member name="M:vini_DB.ImapVB.Imap.MoveMessage(System.String,System.String)">
 <summary>
 Move message to specified folder
 </summary>
 <param name="sUid">UID of the message</param>
 <param name="sFolderName"> Folder where you want to move the message</param>
</member>
<member name="M:vini_DB.ImapVB.Imap.CopyMessage(System.String,System.String)">
 <summary>
 Copy Message
 </summary>
 <param name="sUid">Either UID or range of uid e.g 1:2</param>
 <param name="sFolderName">Folder where it needs to be copied</param>
</member>
<member name="M:vini_DB.ImapVB.Imap.GetMessageSize(System.String)">
 <summary>
 Get the message size
 </summary>
 <param name="sUid"></param>
 <returns>message size</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.SearchMessage(System.String[],System.Boolean,System.Collections.ArrayList)">
 <summary>
 Search the messages by specified criterias
 </summary>
 <param name="asSearchData">Search criterias</param>
 <param name="bExactMatch">Is it exact search</param>
 <param name="asSearchResult">search result</param>
</member>
<member name="M:vini_DB.ImapVB.Imap.FetchPartHeader(System.String,System.String,System.Collections.ArrayList)">
 <summary>
 Fetch Header of the message uid and part
 </summary>
 <param name="sMessageUID"> Message UID</param>
 <param name="sMessagePart"> Message part</param>
 <param name="asMessageHeader">Output Array</param>
</member>
<member name="M:vini_DB.ImapVB.Imap.GetHeader(System.String,System.String,System.Collections.ArrayList)">
 <summary>
 Get the header for specific partNumber and Message UID
 </summary>
 <param name="sMessageUid">Unique Identifier of message</param>
 <param name="sPartNumber"> Message part number</param>
 <param name="asMessageHeader">Return array </param>
</member>
<member name="M:vini_DB.ImapVB.Imap.IsMultipart(System.Collections.ArrayList)">
 <summary>
 Check if this message is multipart
 To Identify multipart message, the content-type is either
 multipart or rfc822
 </summary>
 <param name="asHeader"></param>
 <returns></returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.IsNilString(System.String@)">
 <summary>
 Returns true if starts with NIL
 </summary>
 <param name="sBodyStruct">Body Structure</param>
 <returns>true/false</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.GetContentType(System.String@,System.String@,System.String@,System.String@)">
 <summary>
 Get the content type
 </summary>
 <param name="sBodyStruct">Body Structure</param>
 <param name="sType">Content Type</param>
 <param name="sSubType">Sub Type</param>
 <param name="sContentType">Content Type Value</param>
 <returns>True/false</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.GetContentDisposition(System.String@,System.String@)">
 <summary>
 Get Content Disposition
 </summary>
 <param name="sBodyStruct"> Body Structure</param>
 <param name="sDisp">Content Disposition</param>
 <returns>true if success</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.ParseQuotedString(System.String@,System.String@)">
 <summary>
 Parse the quoted string in body structure
 </summary>
 <param name="sBodyStruct">Body Structure</param>
 <param name="sString">"Quoted string</param>
 <returns></returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.ParseString(System.String@,System.String@)">
 <summary>
 Parse the string (seperated by spaces or parenthesis)
 </summary>
 <param name="sBodyStruct">Body Struct</param>
 <param name="sString">string</param>
 <returns></returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.ParseLanguage(System.String@,System.String@)">
 <summary>
 Parse the language or list of languages in body structure
 </summary>
 <param name="sBodyStruct">Bosy structure</param>
 <param name="sString">Languages</param>
 <returns>true if success</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.ParseParameters(System.String@,System.Collections.ArrayList)">
 <summary>
 Parse the parameter in body structure
 </summary>
 <param name="sBodyStruct">Body structure</param>
 <param name="asParams">parameter</param>
 <returns>true if success</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.ParseExtension(System.String@,System.String@)">
 <summary>
 Parse the extension in body structure
 </summary>
 <param name="sBodyStruct">body structure</param>
 <param name="sString">extension</param>
 <returns>true if success</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.ParseAddressList(System.String@,System.String@)">
 <summary>
 Parse the address string
 </summary>
 <param name="sBodyStruct">body structure</param>
 <param name="sString">address</param>
 <returns>true if success</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.ParseAddress(System.String@,System.String@)">
 <summary>
 Parse one address and format the string
 </summary>
 <param name="sBodyStruct">body structure</param>
 <param name="sString">address</param>
 <returns>true if success</returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.FindAndRemove(System.String@,System.Char)">
 <summary>
 find the given character and remove
 </summary>
 <param name="sBodyStruct">body structure</param>
 <param name="ch">first character to find and remove</param>
 <returns>true if success</returns>
</member>
<member name="P:vini_DB.ImapVB.Imap.nNbreMsgTotal">
 <summary>
 Nom de messages dans le dossier
 </summary>
</member>
<member name="M:vini_DB.ImapVB.Imap.GetSubject(System.String)">
 <summary>
 Récupération du sujet d'un message
 </summary>
 <param name="sMessageUid"></param>
 <returns></returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.GetBody(System.String)">
 <summary>
 Get the Body structure of the message.
 If message is single part then first part is 1
 If message is multipart then first part is 0
 </summary>
 <param name="sMessageUID"> Message UID</param>
</member>
<member name="M:vini_DB.ImapVB.Imap.DecodequotedprintableString(System.String,System.String)">
 <summary>
  Decode a quotedPrintable String
 </summary>
 <param name="pStrIn"></param>
 <param name="encoding"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.ImapVB.Imap.getMessage(System.String)">
 <summary>
 Récupération d'un message à partir de son uid
 on ne récupére que le From, le To , le Sujet et le Body au format Text
 </summary>
 <param name="suid"></param>
 <returns></returns>
</member>
<member name="M:vini_DB.ImapVB.Imap.createFolder(System.String)">
 <summary>
 Création d'un dossier à la racine de la mailBox
 </summary>
 <param name="Folder"></param>
 <returns>OK,ALLREADYEXISTS</returns>
 <remarks></remarks>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MSG_FLAG_SEEN">
 <summary>
 Message flag:seen
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MSG_FLAG_ANSWERED">
 <summary>
 Message flag: answered
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MSG_FLAG_FLAGGED">
 <summary>
 Message flag: flagged
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MSG_FLAG_DRAFT">
 <summary>
 Message flag: draft
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MSG_FLAG_DELETED">
 <summary>
 Message flag: deleted
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MAX_MSG_FLAGS">
 <summary>
 Max Message flags: 10
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_DEFAULT_PORT">
 <summary>
 Imap default port: 143
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_DEFAULT_TIMEOUT">
 <summary>
 Imap default timeout:30 sec
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_COMMAND_VAL">
 <summary>
 Imap Command Identifier value:Initial 0
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_COMMAND_PREFIX">
 <summary>
 Imap command Identified prefix: IMAP00
 </summary>
</member>
<member name="P:vini_DB.ImapVB.ImapBase.IMAP_COMMAND_IDENTIFIER">
 <summary>
 Imap command identified which is combination of
 Imap identifier prefix and val
 eg. Prefix:IMAP00, Val: 1
 Imap command Identified= IMAP001
 </summary>
</member>
<member name="P:vini_DB.ImapVB.ImapBase.IMAP_SERVER_RESPONSE_OK">
 <summary>
 Imap Server OK response which is combination of 
 Imap Identifier and Imap OK response.
 eg. IMAP001 OK
 </summary>
</member>
<member name="P:vini_DB.ImapVB.ImapBase.IMAP_SERVER_RESPONSE_NO">
 <summary>
 Imap Server NO response which is combination of 
 Imap Identifier and Imap NO response.
 eg. IMAP001 NO
 </summary>
</member>
<member name="P:vini_DB.ImapVB.ImapBase.IMAP_SERVER_RESPONSE_BAD">
 <summary>
 Imap Server BAD response which is combination of
 Imap Identifier and Imap BAD response.
 eg. IMAP001 BAD
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_UNTAGGED_RESPONSE_PREFIX">
 <summary>
 Imap Untagged response prefix: *
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_OK_RESPONSE">
 <summary>
 Impa ok response : OK
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_NO_RESPONSE">
 <summary>
 Imap no response: NO
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_BAD_RESPONSE">
 <summary>
 Imap bad response :BAD
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_BAD_SERVER_RESPONSE">
 <summary>
 Imap bad server response : "* BAD"
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_OK_SERVER_RESPONSE">
 <summary>
 Imap ok server response: "* OK"
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_CAPABILITY_SERVER_RESPONSE">
 <summary>
 Imap Server response "* CAPABILITY"
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_CAPABILITY_COMMAND">
 <summary>
 Imap capability command : CAPABILITY
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_CONNECT_COMMAND">
 <summary>
 Imap connect command :CONNECT
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_LOGIN_COMMAND">
 <summary>
 Imap login command : LOGIN userid  password
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_LOGOUT_COMMAND">
 <summary>
 Imap logout command : LOGOUT
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_SELECT_COMMAND">
 <summary>
 Imap select command : SELECT INBOX
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_EXAMINE_COMMAND">
 <summary>
 Imap examine command : EXAMINE INBOX
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_APPEND_COMMAND">
 <summary>
 Imap append command : APPEND
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_QUOTA_RESPONSE">
 <summary>
 Imap quota response : QUOTA
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_GETQUOTA_COMMAND">
 <summary>
 Imap get quota command : GETQUOTAROOT 
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_APPEND_RESPONSE_START">
 <summary>
 Imap append response start : [
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_APPEND_RESPONSE_END">
 <summary>
 Imap append response end : ]
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_GO_AHEAD_RESPONSE">
 <summary>
 Imap go ahead response: +
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_SEARCH_COMMAND">
 <summary>
 Imap uid search command : UID SEARCH
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_SEARCH_RESPONSE">
 <summary>
 Imap search command : SEARCH
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_UIDFETCH_COMMAND">
 <summary>
 Imap uid fetch command : UID FETCH
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_FETCH_COMMAND">
 <summary>
 Imap fetch command : FETCH
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_BODYSTRUCTURE_COMMAND">
 <summary>
 Imap BodyStructure command
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_UIDSTORE_COMMAND">
 <summary>
 Imap uid store command
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_UIDCOPY_COMMAND">
 <summary>
 Imap uid copy command
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_EXPUNGE_COMMAND">
 <summary>
 Imap expunge command
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_NOOP_COMMAND">
 <summary>
 Imap noop command : NOOP
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_SETFLAGS_COMMAND">
 <summary>
 Imap add flags +flags
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_REMOVEFLAGS_COMMAND">
 <summary>
 Imap remove flags -flags
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_RFC822_SIZE_COMMAND">
 <summary>
 Imap RFC822.SIZE
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_COMMAND_EOL">
 <summary>
 Imap command terminator: \r\n
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_NIL">
 <summary>
 Imap message nil size : NIL
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_HEADER_EOL">
 <summary>
 Imap message header terminator : \r\n
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_SIZE_START">
 <summary>
 Imap message size start : '{'
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_SIZE_END">
 <summary>
 Imap message size end : '}'
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_CONTENT_TYPE">
 <summary>
 Imap message content type : "Content-Type: "
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_RFC822">
 <summary>
 Imap mesage content type: rfc822
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_ID">
 <summary>
 Imap message id
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_MULTIPART">
 <summary>
 Imap mesage content type: multipart
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_CONTENT_ENCODING">
 <summary>
 Imap content encoding : "Content-Transfer-Encoding: "
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_CONTENT_DESC">
 <summary>
 Imap content description : "Content-Description: "
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_CONTENT_DISP">
 <summary>
 Imap content disposition : "Content-Disposition: "
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_CONTENT_SIZE">
 <summary>
 Imap content size
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_CONTENT_LINES">
 <summary>
 Imap content lines
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MESSAGE_BASE64_ENCODING">
 <summary>
 Imap message base64 encoding : BASE64
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_MSG_DEFAULT_PART">
 <summary>
 Imap message default part : 1
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_HEADER_SENDER_TAG">
 <summary>
 Imap header Sender tag
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_HEADER_FROM_TAG">
 <summary>
 Imap header from tag
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_HEADER_IN_REPLY_TO_TAG">
 <summary>
 Imap header in-reply-to tag
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_HEADER_REPLY_TO_TAG">
 <summary>
 IKmap header reply-to tag
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_HEADER_TO_TAG">
 <summary>
 Imap header to tag
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_HEADER_CC_TAG">
 <summary>
 Imap header cc tag
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_HEADER_BCC_TAG">
 <summary>
 Imap header bcc tag
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_HEADER_SUBJECT_TAG">
 <summary>
 Imap header subject tag
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_HEADER_DATE_TAG">
 <summary>
 Imap header date tag
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_PLAIN_TEXT">
 <summary>
 Imap body type
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_AUDIO_WAV">
 <summary>
 Imap audio wave:  audio/wav
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.IMAP_VIDEO_MPEG4">
 <summary>
 Imap video mpeg4  : video/mpeg4
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.m_sHost">
 <summary>
 Imap host
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.m_nPort">
 <summary>
 Imap port : default IMAP_DEFAULT_PORT : 143
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.m_sUserId">
 <summary>
 User id
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.m_sPassword">
 <summary>
 User Password
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.m_bSSLEnabled">
 <summary>
 SSL Enabled
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.m_bIsConnected">
 <summary>
 Is Imap server connected
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.m_oImapServ">
 <summary>
 Tcpclient object
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.m_oNetStrm">
 <summary>
 Network stream object
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.m_oRdStrm">
 <summary>
 StreamReader object
 </summary>
</member>
<member name="T:vini_DB.ImapVB.ImapBase.ImapResponseEnum">
 <summary>
 Imap server response result
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.ImapResponseEnum.IMAP_SUCCESS_RESPONSE">
 <summary>
 Imap Server responded "OK"
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.ImapResponseEnum.IMAP_FAILURE_RESPONSE">
 <summary>
 Imap Server responded "NO" or "BAD"
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.ImapResponseEnum.IMAP_IGNORE_RESPONSE">
 <summary>
 Imap Server responded "*"
 </summary>
</member>
<member name="T:vini_DB.ImapVB.ImapBase.LogTypeEnum">
 <summary>
 Log type enum
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.LogTypeEnum.INFO">
 <summary>
 Information
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.LogTypeEnum.WARN">
 <summary>
 Warning
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.LogTypeEnum.ERROR">
 <summary>
 Error
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapBase.LogTypeEnum.IMAP">
 <summary>
 Imap Log information
 </summary>
</member>
<member name="M:vini_DB.ImapVB.ImapBase.Log(vini_DB.ImapVB.ImapBase.LogTypeEnum,System.String)">
 <summary>
 Logging function
 </summary>
 <param name="type">Log type;LogTypeEnum</param>
 <param name="log">Log data</param>
</member>
<member name="M:vini_DB.ImapVB.ImapBase.Connect(System.String,System.UInt16,System.Boolean)">
 <summary>
 Connect to specified host and port
 </summary>
 <param name="sHost">Imap host</param>
 <param name="nPort">Imap port</param>
 <param name="sslEnabled"> </param>
 <returns>ImapResponseEnum type</returns>
</member>
<member name="M:vini_DB.ImapVB.ImapBase.Disconnect">
 <summary>
 Disconnect connection with Imap server
 </summary>
</member>
<member name="M:vini_DB.ImapVB.ImapBase.SendAndReceive(System.String,System.Collections.ArrayList@)">
 <summary>
 Send command to server and retrieve response
 </summary>
 <param name="command">Command to send Imap Server</param>
 <param name="sResultArray">Imap Server response</param>
 <returns>ImapResponseEnum type</returns>
</member>
<member name="M:vini_DB.ImapVB.ImapBase.Receive(System.Collections.ArrayList@)">
 <summary>
  retrieve response
 </summary>
 <param name="command">Command to send Imap Server</param>
 <param name="sResultArray">Imap Server response</param>
 <returns>ImapResponseEnum type</returns>
</member>
<member name="M:vini_DB.ImapVB.ImapBase.SendAndReceiveByNumLines(System.String,System.Collections.ArrayList@,System.Int32)">
 <summary>
 Send command to server and retrieve response
 </summary>
 <param name="command">Command to send Imap Server</param>
 <param name="sResultArray">Imap Server response</param>
 <returns>ImapResponseEnum type</returns>
</member>
<member name="M:vini_DB.ImapVB.ImapBase.ReceiveBuffer(System.String@,System.Int32)">
 <summary>
 Read the Server Response by specified size
 </summary>
 <param name="sBuffer"></param>
 <param name="nSize"></param>
 <returns></returns>
</member>
<member name="M:vini_DB.ImapVB.ImapBase.Capability">
 <summary>
 IMAP Capability command
 </summary>
</member>
<member name="M:vini_DB.ImapVB.ImapBase.ValidateServerCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
 <summary>
 Validate Certificate
 </summary>
 <param name="sender"></param>
 <param name="certificate"></param>
 <param name="chain"></param>
 <param name="sslPolicyErrors"></param>
 <returns></returns>
</member>
<member name="T:vini_DB.ImapVB.ImapException">
 <summary>
 Imap Exception class which implements Imap releted exceptions
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.m_message">
 <summary>
 Exception message string
 </summary>
</member>
<member name="T:vini_DB.ImapVB.ImapException.ImapErrorEnum">
 <summary>
 enum for Imap exception errors
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_URI">
 <summary>
 failure parsing the url
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_MESSAGEUID">
 <summary>
 invalid message uid in the url
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_AUTHFAILED">
 <summary>
 invalid username/password in the url
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_CONNECT">
 <summary>
 failure connecting to imap server
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_NOTCONNECTED">
 <summary>
 not connected to any IMAP
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_LOGIN">
 <summary>
 failure logging into imap server
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_LOGOUT">
 <summary>
 failure to logout from imap server
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_INSUFFICIENT_DATA">
 <summary>
 not enough data to restore
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_TIMEOUT">
 <summary>
 timeout while waiting for response
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_SOCKET">
 <summary>
 socket error while receiving
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_QUOTA">
 <summary>
 failure getting the quota information
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_SELECT">
 <summary>
 failure selecting a IMAP folder
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_EXAMINE">
 <summary>
 failure examining an IMAP folder
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_NOTSELECTED">
 <summary>
  No folder is currently selected
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_SEARCH">
 <summary>
 failure to search
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_SEARCH_EXACT">
 <summary>
 failed to do exact match after search
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_INVALIDSEARCHKEY">
 <summary>
 unsupported search key
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_GETMIME">
 <summary>
 failure to get message MIME
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_INVALIDHEADER">
 <summary>
 Message Header is in invalid format
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_FETCHBODYSTRUCT">
 <summary>
 Failed to fetch the bodystructure
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_FETCHMSG">
 <summary>
 failure to fetch a IMAP message
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_FETCHSIZE">
 <summary>
 failure to fetch a IMAP message size
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_MEMALLOC">
 <summary>
 failure to allocate memory
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_ENCODINGERROR">
 <summary>
 failure to encode the audio content
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_FILEIO">
 <summary>
 failure to read/write the audio content
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_STOREMSG">
 <summary>
 failure to store the message in IMAP
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_EXPUNGE">
 <summary>
 failure to issue expunge command
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_INVALIDPARAM">
 <summary>
 invalid parameter to API
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_CAPABILITY">
 <summary>
 Capability command error
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.ImapErrorEnum.IMAP_ERR_SERIOUS">
 <summary>
 Serious Problem
 </summary>
</member>
<member name="P:vini_DB.ImapVB.ImapException.Message">
 <summary>
 Property Message (string)
 </summary>
</member>
<member name="F:vini_DB.ImapVB.ImapException.errorType">
 <summary>
 Error Type: ImapErrorEnum
 </summary>
</member>
<member name="P:vini_DB.ImapVB.ImapException.Type">
 <summary>
 Property : Type (ImapErrorEnum)
 </summary>
</member>
<member name="M:vini_DB.ImapVB.ImapException.#ctor(System.String)">
 <summary>
 Constructor
 </summary>
 <param name="message">string</param>
</member>
<member name="M:vini_DB.ImapVB.ImapException.#ctor(System.String,System.Exception)">
 <summary>
 Constructor
 </summary>
 <param name="message">string</param>
 <param name="inner">Exception</param>
</member>
<member name="M:vini_DB.ImapVB.ImapException.#ctor(vini_DB.ImapVB.ImapException.ImapErrorEnum)">
 <summary>
 Constructor
 </summary>
 <param name="Type">ImapErrorEnum</param>
</member>
<member name="M:vini_DB.ImapVB.ImapException.#ctor(vini_DB.ImapVB.ImapException.ImapErrorEnum,System.String)">
 <summary>
 Constructor
 </summary>
 <param name="Type">ImapErrorEnum</param>
 <param name="error">string</param>
</member>
<member name="M:vini_DB.ImapVB.ImapException.GetDescription(vini_DB.ImapVB.ImapException.ImapErrorEnum)">
 <summary>
 Get Description for specified Type
 </summary>
 <param name="Type">ImapErrorEnum type</param>
 <returns>string</returns>
</member>
<member name="T:vini_DB.ImportPrestashop">
 <summary>
 Classe d'import des commandes depuis le Message Mail de prestashop
 </summary>
 <remarks></remarks>
</member>
<member name="M:vini_DB.ImportPrestashop.Import(System.Boolean,System.Boolean)">
 <summary>
 Mécanisme d'import de commande depuis la boite mail de réception Prestashop
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.ImportPrestashop.createCMDCLT(System.Net.Mail.MailMessage,System.Boolean)">
 <summary>
 Création d'une commande Client à partir d'un mail
 </summary>
 <param name="pMsg">Message conteant la commande</param>
 <param name="pCheck">Vérification préalable oui ou non (Oui par defaut)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:vini_DB.LgFactHBV">
 <summary>
 Classe Ligne de facture Hobivin
 Créée à partir de ligneCommande
 </summary>
 <remarks></remarks>
</member>
<member name="T:vini_DB.dsError">
<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member>
<member name="T:vini_DB.dsError.COMMANDE_SCMD_NULLDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsError.FACTCOMERRORDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsError.COMMANDE_ERRORDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsError.BASansMVTSTKDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsError.COMMANDE_SCMD_NULLRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsError.FACTCOMERRORRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsError.COMMANDE_ERRORRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsError.BASansMVTSTKRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsError.COMMANDE_SCMD_NULLRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsError.FACTCOMERRORRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsError.COMMANDE_ERRORRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsError.BASansMVTSTKRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsErrorTableAdapters.COMMANDE_SCMD_NULLTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsErrorTableAdapters.FACTCOMERRORTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsErrorTableAdapters.COMMANDE_ERRORTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsErrorTableAdapters.BASansMVTSTKTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicom">
<summary>
Represents a strongly typed in-memory cache of data.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.EXPORTPARAMDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.REGLEMENTDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.CONSTANTESDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.MVT_STOCKDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.FRN_COMMDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.TRANSPORTEURDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.FACTCOMDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.LOCKDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.USERSRIGHTSDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.USERSDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.APPELATIONDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.FICHETECHNIQUE_FOURNISSEURDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.IMAGESDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.RECAP_COLISAGEDataTable">
<summary>
Represents the strongly named DataTable class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.EXPORTPARAMRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.REGLEMENTRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.CONSTANTESRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.MVT_STOCKRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.FRN_COMMRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.TRANSPORTEURRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.FACTCOMRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.LOCKRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.USERSRIGHTSRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.USERSRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.APPELATIONRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.FICHETECHNIQUE_FOURNISSEURRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.IMAGESRow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.RECAP_COLISAGERow">
<summary>
Represents strongly named DataRow class.
</summary>
</member>
<member name="T:vini_DB.dsVinicom.EXPORTPARAMRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.REGLEMENTRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.CONSTANTESRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.MVT_STOCKRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.FRN_COMMRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.TRANSPORTEURRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.FACTCOMRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.LOCKRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.USERSRIGHTSRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.USERSRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.APPELATIONRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.FICHETECHNIQUE_FOURNISSEURRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.IMAGESRowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicom.RECAP_COLISAGERowChangeEvent">
<summary>
Row event argument class
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.EXPORTPARAMTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.REGLEMENTTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.CONSTANTESTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.MVT_STOCKTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.FRN_COMMTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.TRANSPORTEURTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.FACTCOMTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.LOCKTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.USERSRIGHTSTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.USERSTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.APPELATIONTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.FICHETECHNIQUE_FOURNISSEURTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="T:vini_DB.dsVinicomTableAdapters.IMAGESTableAdapter">
<summary>
Represents the connection and commands used to retrieve and save data.
</summary>
</member>
<member name="M:vini_DB.preCommande.Purge(System.DateTime)">
 <summary>
 Purge des lignes de précommandes
 </summary>
 <param name="pdtFin">date Max</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.preCommande.ExporterPreCommande(System.String,System.String)">
 <summary>
 Export Quadra
 </summary>
 <param name="pstFileName"></param>
 <param name="pExportType"></param>
 <remarks></remarks>
</member>
<member name="M:vini_DB.TauxComm.getListe(System.Int32)">
 <summary>
 Rend la Liste des Taux de Commission associé à une fournisseur
 </summary>
 <param name="pIdFRN">id Fournisseur</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.TauxComm.getListe(System.Int32,System.String)">
 <summary>
 Rend la Liste des Taux de Commission associé à un fournisseur et un type de Client
 </summary>
 <param name="pIdFRN">id Fournisseur</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.EtatReglement_Exporte.action(vini_DB.vncEnums.vncActionReglement)">
 <summary>
 Rend un état en fonction d'une action
 
 Action = Annulation Export => etat = Saisi
 </summary>
 <param name="vncAction"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.EtatReglement_Saisi.action(vini_DB.vncEnums.vncActionReglement)">
 <summary>
 Rend un état en fonction d'une action
 
 Action = Export => etat = Exporte
 </summary>
 <param name="vncAction"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.Facture.dateFacture">
 <summary>
 date facture = dateCommande
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.Facture.bExportInternet">
 <summary>
 Rend ou met a jour l'indicateur d'export internet 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Facture.ExporterFacture(System.String,System.String)">
 <summary>
 Export Quadra
 </summary>
 <param name="pstFileName"></param>
 <param name="pExportType"></param>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Facture.getSolde">
 <summary>
 Rend le solde non réglé de la facture
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.FactColisage.genereMvtStock">
 <summary>
 Affection de la référence de facture de colisage aux mvt de stock
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.FactColisage.supprimeMvtStock">
 <summary>
 Libère les mouvements de stocks de la facture de colisade
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.FactColisage.genereLignesFactureMoisSansMouvements(vini_DB.FactColisage,System.DateTime,System.DateTime,System.Int32)">
 <summary>
 Genere les lignes de facture pour les mois sans mouvements
 </summary>
 <param name="pFactCol"></param>
 <param name="pDate"></param>
 <param name="pDateLimite"></param>
 <param name="pSI"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.EtatMvtStock_nFact.action(vini_DB.vncEnums.vncActionFactColisage)">
 <summary>
 Rend un état en fonction d'une action
 
 Action = Annulation facture => etat = non Facturé
 </summary>
 <param name="vncAction"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.EtatMvtStock_Fact.action(vini_DB.vncEnums.vncActionFactColisage)">
 <summary>
 Rend un état en fonction d'une action
 
 Action = Annulation facture => etat = non Facturé
 </summary>
 <param name="vncAction"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.EtatCommandeTransmiseQuadra.action(vini_DB.vncEnums.vncActionEtatCommande)">
 <summary>
 Si annluEclatement => Livrée , sinon on reste dans l'état présent
 </summary>
 <param name="vncAction"></param>
 <returns></returns>
</member>
<member name="M:vini_DB.FactCom.toCSV">
 <summary>
 Renvoie une chaine de caractère au format CSV pour export internet
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Fournisseur.createandload(System.String)">
 <summary>
 Constructeur pour Chargement par la clé
 </summary>
 <param name="pCode"> Code Fournisseur</param>
 <returns>Objet Fournisseur ou null</returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.LgCommande.TxComm">
 <summary>
 Taux de commission
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.LgCommande.MtComm">
 <summary>
 Montant de commission
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.LgCommande.bStockDispo">
 <summary>
 Le Stock est-il disponible ?
 Donnée non sauvegardée (recalculée à la demande)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:vini_DB.LgCommande.idTiers">
 <summary>
 Id du tiers associé à la commande
 MAJ par le Load de la commande
 non sauvegardé
 
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.LgCommande.CalculCommission(vini_DB.vncEnums.CalculCommQte)">
 <summary>
 Calcul de la commission en fonction de la Qte
 </summary>
 <param name="pQteCalcul">Calculer la commsion en fonction de la qte Commandée ou Livrée</param>
 <remarks></remarks>
</member>
<member name="M:vini_DB.LgCommande.controleStockDispo">
 <summary>
 Controle du stock disponible pour chaque ligne de commande
 met à jour l'indicateur bStockDispo sur la ligne de commande
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.getFRNIDByKey(System.String)">
 <summary>
 Méthode de classe : Renvoie l'ID du fournisseur en Fonction de son Code 
 </summary>
 <returns>ID du Fournisseur ou -1</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.getCLTIDByKey(System.String)">
 <summary>
 Méthode de classe : Renvoie l'ID du Client en Fonction de son Code 
 </summary>
 <returns>ID du Client ou -1</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.getCLTIDByPrestashopId(System.String)">
 <summary>
 Méthode de classe : Renvoie l'ID du Client en Fonction de son IdPrestashop
 </summary>
 <returns>ID du Client ou -1</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeCLTIntegmédiairePOurOrigine(System.Int32,System.String)">
 <summary>
 Renvoie une liste des client de type intermédiaire pour une origine
 </summary>
 <param name="strCode"></param>
 <param name="strNom"></param>
 <param name="strRS"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.getIDPRDByKey(System.String)">
 <summary>
 Renvoie l'ID en fonction de la clé 
 </summary>
 <returns>ID  ou -1</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.GetNumeroFactureHBV">
 <summary>
 Rend le prochain numéro de facture HOBIVIN
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeSCMDAFacturerCom(System.DateTime,System.DateTime,System.String)">
 <summary>
 Liste des sous commandes à facturer en Commission 
 </summary>
 <param name="pddeb">Date de facture Fournisseur DEBUT</param>
 <param name="pdfin">Date de facture Fournisseur FIN</param>
 <param name="pCodeFourn">code Fournisseur ou ""</param>
 <returns>une Collection de sous commandes</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeSCMDFournisseurExportQuadra(vini_DB.vncEnums.vncOrigineCmd,System.DateTime,System.DateTime,System.String)">
 <summary>
 Liste des sous-commandes a Export vers Quadra
 </summary>
 <param name="pOrigine">Origine de la commmande "HOBIVIN" ou "VINICOM"</param>
 <param name="pddeb"></param>
 <param name="pdfin"></param>
 <param name="pCodeFourn"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeSCMDGeneree(vini_DB.vncEnums.vncOrigineCmd,System.DateTime,System.DateTime,System.String)">
 <summary>
 Liste des SousCommandes Genérées 
 </summary>
 <param name="pOrigine"></param>
 <param name="pddeb"></param>
 <param name="pdfin"></param>
 <param name="pCodeFourn"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeSCMDFournisseurNONExportQuadra(vini_DB.vncEnums.vncOrigineCmd,System.DateTime,System.DateTime,System.String)">
 <summary>
 Liste des SousCommandes Genérées dont le fournisseur n'est pas marqué comme 'ExportQuadra'
 </summary>
 <param name="pOrigine"></param>
 <param name="pddeb"></param>
 <param name="pdfin"></param>
 <param name="pCodeFourn"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeFACTCOMNonReglee(System.String,System.String)">
 <summary>
 Liste des facture de commission non reglee
 </summary>
 <param name="strCode"></param>
 <param name="strRSFournisseur"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeFACTTRPNonReglee(System.String,System.String)">
 <summary>
 Liste des facture de colisage non reglee
 </summary>
 <param name="strCode"></param>
 <param name="strRSClient"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.loadFACTHBVFromCmd(System.Int64)">
 <summary>
 Chargement de la facture à partir de l'Id de la commande
 </summary>
 <param name="pIdCmd"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.saveColLGFACTHBV">
 <summary>
 Sauvegarde des Lignes des facture Hobivin
 Chargement des ID des lignes existantes
 pour chaque lignes de la collection
 Si l'ID existe
     Update de la ligne + Suppression de l'ID de la liste des Ids
 Sinon
     Création de la Ligne
 
 Suppression des Lignes correspondant aux Ids restants
 
 
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.deletecolLgHBV">
 <summary>
 Suppression des lignes d'une facture
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeFACTHBV(System.String,System.String,vini_DB.vncEnums.vncEtatCommande)">
 <summary>
 Rend une collection de FactHBV
 </summary>
 <param name="strCode"></param>
 <param name="strRSClient"></param>
 <param name="pEtat"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeFACTHBVDate(System.DateTime,System.DateTime,System.String,vini_DB.vncEnums.vncEtatCommande)">
 <summary>
 Rend une liste de factHBV en fonctino des date et de l'état
 </summary>
 <param name="pddeb"></param>
 <param name="pdfin"></param>
 <param name="pCodeClient"></param>
 <param name="pEtat"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.LoadcolLgFactColisage">
 <summary>
 Chargement de la liste des lignes d'une facture de Colisage
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeFACTColisage(System.DateTime,System.DateTime,System.String,vini_DB.vncEnums.vncEtatCommande)">
 <summary>
 REnd une collection de facture de colisage correspondant au critère
 </summary>
 <param name="pddeb">date de Facture (inclus)</param>
 <param name="pdfin">Date de Facture (inclus)</param>
 <param name="pCodeFournisseur">Code Fournisseur (Optionel)</param>
 <param name="pEtat">Etat de la Facture (Par defaut tous)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeFACTColisage(System.String,System.String,vini_DB.vncEnums.vncEtatCommande)">
 <summary>
 REnd une collection de facture de colisage correspondant au critère
 </summary>
 <param name="strCode">code de la facture</param>
 <param name="strRSFournisseur">Raison Sociale du fournisseur</param>
 <param name="pEtat">Etat de la Facture (Par defaut tous)</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.ListeFACTColisageNonReglee(System.String,System.String)">
 <summary>
 Liste des facture de colisage non reglee
 </summary>
 <param name="strCode"></param>
 <param name="strRSFournisseur"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.loadcolUSERSRIGHTS">
 <summary>
 Chargement des Lignes de menu INTERDIT pour un user
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.deleteTauxComms(System.Int32)">
 <summary>
 Supprime les Taux de Coms du Fournisseur
 </summary>
 <param name="pFRNId"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.getListeTauxComm(System.Int32)">
 <summary>
 Rend la liste des taux de commision d'un fournisseur
 </summary>
 <param name="pidFRN">id Fournisseur</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.getListeTauxComm(System.Int32,System.String)">
 <summary>
 Rend la Liste des taux de commissons pour un Fournisseur et un type de client 
 </summary>
 <param name="pidFRN">id Fournisseur</param>
 <param name="pTypeClt">Code Type de client</param>
 <returns>collection</returns>
 <remarks>Normalement ne rend qu'un élement</remarks>
</member>
<member name="M:vini_DB.Persist.executeSQLQuery(System.String)">
 <summary>
 Execute a Query and returns the First Col of the First Line in the result
 </summary>
 <param name="strSQL"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.truncate(System.String,System.Int32)">
 <summary>
 Returns the String truncate to the given number
 </summary>
 <param name="pstr"></param>
 <param name="pLength"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Persist.GetSCMDMinID">
 <summary>
 Retourne l'ID de sous commande le plus petit
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.Produit.createandloadbyKey(System.String)">
 <summary>
 Constructeur pour Chargement par la clé
 </summary>
 <param name="pCode"> Code Produit</param>
 <returns>Objet Produit ou null</returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.SousCommande.getListeAExporter(vini_DB.vncEnums.vncTypeExportScmd,vini_DB.vncEnums.vncOrigineCmd,System.DateTime,System.DateTime,System.String)">
 <summary>
 Rend une liste de sous commande à Exporter 
 </summary>
 <param name="pTypeExport">Type d'export (1=ExportInternet, 2 = ExportQuadra)</param>
 <param name="pOrigine">Origine de la Commande</param>
 <param name="pddeb">Date De Debut</param>
 <param name="pdfin">Date de fin </param>
 <param name="pStrCodeFourn">Code Fournisseur (Facultatif)</param>
 <returns></returns>
</member>
<member name="M:vini_DB.SousCommande.ValiderExportQuadra">
 <summary>
 Valider l'export quadra : Changement d'état de la sousCommande
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.SousCommande.toCSV">
 <summary>
 Export d'une Sous commande au format CSV pour être exportée vers le site internet
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:vini_DB.SousCommande.calcCommisionstandard(vini_DB.vncEnums.CalculCommScmd)">
 <summary>
 Calcul de la commission pour la sousCommande
 </summary>
 <param name="pBaseComm">base de commission (HT Calculé ou HT Facturé)</param>
 <returns></returns>
 <remarks>Taux de commission = Taux de la première ligne</remarks>
</member>
<member name="P:vini_DB.Transporteur.colTransporteur(System.Boolean)">
 <summary>
 Rend une collection des transporteur.
 Si bForce = True, la collection est rechargée.
 </summary>
 <param name="bForce"></param>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
</members>
</doc>
